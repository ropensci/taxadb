---
title: "Tutorial for taxadb"
author: "Carl Boettiger, Kari Norman"
date: "`r Sys.Date()`"
references:
- id: norman2020
  title: One-click science marketing
  author:
  - family: Norman
    given: Kari E. A
  - family: Chamberlain
    given: Scott
  - family: Boettiger
    given: Carl
  container-title: Methods in Ecology and Evolution
  volume: 11
  URL: 'https://besjournals.onlinelibrary.wiley.com/doi/abs/10.1111/2041-210X.13440'
  DOI: 10.1111/2041-210X.13440
  issue: 9
  page: 1153--1159
  type: article-journal
  issued:
    year: 2020
    month: 9
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{intro}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)

```


The goal of `taxadb` is to provide *fast*, *consistent* access to taxonomic data, supporting common tasks such as resolving taxonomic names to identifiers, looking up higher classification ranks of given species, or returning a list of all species below a given rank. These tasks are particularly common when synthesizing data across large species assemblies, such as combining occurrence records with trait records [see `taxadb` companion paper @norman2020].

Existing approaches to these problems typically rely on web APIs, which can make them impractical for work with large numbers of species or in more complex pipelines.  Queries and returned formats also differ across the different taxonomic authorities, making tasks that query multiple authorities particularly complex. `taxadb` creates a *local* database of most readily available taxonomic authorities, each of which is transformed into consistent, standard, and researcher-friendly tabular formats.


## Install and initial setup

To get started, install the development version directly from GitHub:

```{r eval=FALSE}
devtools::install_github("ropensci/taxadb")
```


```{r message = FALSE}
library(taxadb)
library(dplyr) # Used to illustrate how a typical workflow combines nicely with `dplyr`
```

Create a local copy of the Catalogue of Life (2018) database:

```{r }
td_create("col")
```


Read in the species list used by the Breeding Bird Survey:

```{r, message = FALSE}
bbs_species_list <- system.file("extdata/bbs.tsv", package="taxadb")
bbs <- read.delim(bbs_species_list)
```

## Getting names and ids

Two core functions are `get_ids()` and `get_names()`.  These functions take a vector of names or ids (respectively), and return a vector of ids or names (respectively).  For instance, we can use this to attempt to resolve all the bird names in the Breeding Bird Survey against the Catalogue of Life:


```{r}
birds <- bbs %>%
  select(species) %>%
  mutate(id = get_ids(species, "col"))

head(birds, 10)
```

Note that some names cannot be resolved to an identifier.  This can occur because of miss-spellings, non-standard formatting, or the use of a synonym not recognized by the naming provider.  Names that cannot be uniquely resolved because they are known synonyms of multiple different species will also return `NA`.  The `filter_name` filtering functions can help us resolve this last case (see below).

`get_ids()` returns the IDs of accepted names, that is `dwc:AcceptedNameUsageID`s.  We can resolve the IDs into accepted names:


```{r}
birds %>%
  mutate(accepted_name = get_names(id, "col")) %>%
  head()
```

This illustrates that some of our names, e.g. *Dendrocygna bicolor* are accepted in the Catalogue of Life, while others, *Anser canagicus* are **known synonyms** of a different accepted name: **Chen canagica**.  Resolving synonyms and accepted names to identifiers helps us avoid the possible miss-matches we could have when the same species is known by two different names.


## Taxonomic Data Tables

Local access to taxonomic data tables lets us do much more than look up names and ids.  A family of `filter_*` functions in `taxadb` help us work directly with subsets of the taxonomic data.  As we noted above, this can be useful in resolving certain ambiguous names.

For instance, *Trochalopteron henrici gucenense* does not resolve to an identifier in ITIS:

```{r}
get_ids("Trochalopteron henrici gucenense")
```

Using `filter_name()`, we find this is because the name resolves not to zero matches, but to more than one match:

```{r}
filter_name("Trochalopteron henrici gucenense")
```


```{r}
filter_name("Trochalopteron henrici gucenense")  %>%
  mutate(acceptedNameUsage = get_names(acceptedNameUsageID)) %>%
  select(scientificName, taxonomicStatus, acceptedNameUsage, acceptedNameUsageID)
```


Similar functions `filter_id`, `filter_rank`, and `filter_common` take IDs, scientific ranks, or common names, respectively.  Here, we can get taxonomic data on all bird names in the Catalogue of Life:


```{r}
filter_rank(name = "Aves", rank = "class", provider = "col")
```

Combining these with `dplyr` functions can make it easy to explore this data: for instance, which families have the most species?


```{r}
filter_rank(name = "Aves", rank = "class", provider = "col") %>%
  filter(taxonomicStatus == "accepted", taxonRank=="species") %>%
  group_by(family) %>%
  count(sort = TRUE) %>%
  head()
```

## Using the database connection directly

`filter_*` functions by default return in-memory data frames.  Because they are filtering functions, they return a subset of the full data which matches a given query (names, ids, ranks, etc), so the returned data.frames are smaller than the full record of a naming provider.  Working directly with the SQL connection to the MonetDBLite database gives us access to all the data. The `taxa_tbl()` function provides this connection:

```{r}
taxa_tbl("col")
```

We can still use most familiar `dplyr` verbs to perform common tasks.  For instance: which species has the most known synonyms?

```{r}
taxa_tbl("col") %>%
  count(acceptedNameUsageID, sort=TRUE)
```

# References

